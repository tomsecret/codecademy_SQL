select *
from orders
order by id
limit 100;

select date(ordered_at)
from orders
order by 1
limit 100;
% date() is a function to convert timestamps to date
% order by 1 = order by date(ordered_at)

select date(ordered_at), count(1)
from orders
group by 1
order by 1;

select date(ordered_at), round(sum(amount_paid), 2)
from orders
   join order_items on 
      orders.id = order_items.order_id
group by 1
order by 1;
% can select amount_paid from order_items because we join the two tables

select date(ordered_at), round(sum(amount_paid), 2)
from orders
   join order_items on 
      orders.id = order_items.order_id
where name = 'kale-smoothie'
group by 1
order by 1;

select name, round(sum(amount_paid), 2)
from order_items
group by name
order by 2 desc;

select name, round(sum(amount_paid) /
  (select sum(amount_paid) from order_items) * 100.0, 2) as pct
from order_items
group by 1
order by 2 desc;

select *,
  case name
    when 'kale-smoothie'    then 'smoothie'
    when 'banana-smoothie'  then 'smoothie'
    when 'orange-juice'     then 'drink'
    when 'soda'             then 'drink'
    when 'blt'              then 'sandwich'
    when 'grilled-cheese'   then 'sandwich'
    when 'tikka-masala'     then 'dinner'
    when 'chicken-parm'     then 'dinner'
     else 'other'
  end as category
from order_items
order by id
limit 100;

select
  case name
    when 'kale-smoothie'    then 'smoothie'
    when 'banana-smoothie'  then 'smoothie'
    when 'orange-juice'     then 'drink'
    when 'soda'             then 'drink'
    when 'blt'              then 'sandwich'
    when 'grilled-cheese'   then 'sandwich'
    when 'tikka-masala'     then 'dinner'
    when 'chicken-parm'     then 'dinner'
    else 'other'
  end as category, round(1.0 * sum(amount_paid) /
    (select sum(amount_paid) from order_items) * 100, 2) as pct
from order_items


select name, count(distinct(order_id))
from order_items
group by 1
order by 1;
group by 1
order by 2 desc;


%========== part 2

select
  date(created_at), 
  platform,
  count(distinct user_id) as dau
from gameplays
group by 1,2
order by 1,2;
#you can group two columns.

select
  date(created_at),
  round(sum(price) / count(distinct user_id), 2) as arppu
from purchases
where refunded_at is null
group by 1
order by 1;


#with clauses (Common table expressions)

with daily_revenue as (
  select
    date(created_at) as dt,
    round(sum(price), 2) as rev
  from purchases
  where refunded_at is null
  group by 1
)
select * from daily_revenue order by dt;

with daily_revenue as (
  select
    date(created_at) as dt,
    round(sum(price), 2) as rev
  from purchases
  where refunded_at is null
  group by 1
), 
daily_players as (
  select
    date(created_at) as dt,
    count(distinct user_id) as players
  from gameplays
  group by 1
)
select
  daily_revenue.dt,
  daily_revenue.rev / daily_players.players
from daily_revenue
  join daily_players 
  on daily_revenue.dt = daily_players.dt;
  
from daily_revenue
  join daily_players using (dt);
#a special case join, where both tables have the same name

#self join, calculate retention rates
select
  date(g1.created_at) as dt,
  g1.user_id,
  g2.user_id
from gameplays as g1
  join gameplays as g2 on
    g1.user_id = g2.user_id
    and date(g1.created_at) = date(datetime(g2.created_at, '-1 day'))
order by 1
limit 100;

select
  date(g1.created_at) as dt,
  count(distinct g1.user_id) as total_users,
  count(distinct g2.user_id) as retained_users
from gameplays as g1
  left join gameplays as g2 on
    g1.user_id = g2.user_id
    and date(g1.created_at) = date(datetime(g2.created_at, '-1 day'))
group by 1
order by 1
limit 100;

select
  date(g1.created_at) as dt,
  round(100 * count(distinct g2.user_id) /
    count(distinct g1.user_id)) as retention
from gameplays as g1
  left join gameplays as g2 on
    g1.user_id = g2.user_id
    and date(g1.created_at) = date(datetime(g2.created_at, '-1 day'))
group by 1
order by 1
limit 100;

#Key Performance Indicators are high level health metrics for a business.
#Daily Revenue is the sum of money made per day.
#Daily Active Users are the number of unique users seen each day
#Daily Average Revenue Per Purchasing User (ARPPU) is the average amount of money spent by purchasers each day.
#Daily Average Revenue Per User (ARPU) is the average amount of money across all users.
#1 Day Retention is defined as the number of players from Day N who came back to play again on Day N+1.
  
