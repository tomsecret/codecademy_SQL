select * from flights
limit 10;

# ==== non-correlated subquery
SELECT * 
FROM flights 
WHERE origin in (
    SELECT code 
    FROM airports 
    WHERE elevation < 2000);
    
SELECT * 
FROM flights 
WHERE origin in (
    SELECT code 
    FROM airports 
    WHERE faa_region = 'ASO');
    
    
#we can calculate everything in one step using a subquery
SELECT a.dep_month,
       a.dep_day_of_week,
       AVG(flight_distance) AS average_flights
  FROM (
        SELECT dep_month,
              dep_day_of_week,
               dep_date,
               sum(distance) AS flight_distance
          FROM flights
         GROUP BY 1,2,3
       ) a
 GROUP BY 1,2
 ORDER BY 1,2;
 
 
 #=======correlated subquery

SELECT id
FROM flights AS f
WHERE distance < (
 SELECT AVG(distance)
 FROM flights
 WHERE carrier = f.carrier); 

SELECT origin, id,
    (SELECT COUNT(*)
FROM flights f
WHERE f.id < flights.id
AND f.origin=flights.origin) + 1
 AS flight_sequence_number
FROM flights;

#=====Union clause Merge the columns, called a union.

SELECT brand FROM legacy_products
UNION 
SELECT brand FROM new_products;

SELECT id, avg(a.sale_price) FROM (
  SELECT id, sale_price FROM order_items
  UNION ALL
  SELECT id, sale_price FROM order_items_historic) AS a 
  GROUP BY 1;

 #====== INTERSECT is used to combine two SELECT statements, but returns row
 #s only from the first SELECT s
 #tatement that are identical to a row in the second SELECT statement. 

SELECT category FROM new_products

INTERSECT

SELECT category FROM legacy_products;

# ==== except

SELECT category FROM legacy_products

EXCEPT

SELECT category FROM new_products;

# Summary
The UNION clause allows us to utilize information from multiple tables in our queries.
The UNION ALL clause allows us to utilize information from multiple tables in our queries, 
including duplicate values.
INTERSECT is used to combine two SELECT statements, but returns rows only from 
he first SELECT statement that are identical to a row in the second SELECT statement.
EXCEPT returns distinct rows from the first SELECT statement that arenâ€™t output by the second SELECT statement


#==========conditional aggregates
select count(id) from flights;

select count(id) from flights
where arr_time is not null 
and destination is 'ATL';

#===== case statement 
SELECT
    CASE
        WHEN elevation < 500 THEN 'Low'
        WHEN elevation BETWEEN 500 AND 1999 THEN 'Medium'
        WHEN elevation >= 2000 THEN 'High'
        ELSE 'Unknown'
    END AS elevation_tier
    , COUNT(*)
FROM airports
GROUP BY 1;

SELECT    state, 
    COUNT(CASE WHEN elevation < 1000 THEN 1 ELSE NULL END) as count_low_elevation_aiports 
FROM airports 
GROUP BY state;


SELECT origin, sum(distance) as total_flight_distance, sum(CASE WHEN carrier = 'DL' THEN distance ELSE 0 END) as total_delta_flight_distance 
FROM flights 
GROUP BY origin;

SELECT     origin, 
    100.0*(sum(CASE WHEN carrier = 'DL' THEN distance ELSE 0 END)/sum(distance)) as percentage_flight_distance_from_delta 
    FROM flights 
GROUP BY origin;

SELECT state, 100.0 * sum(CASE WHEN elevation >= 2000 THEN 1 ELSE 0 END) / count(*)  as percentage_high_elevation_airports 
FROM airports 
GROUP BY state;

#date, time and string
SELECT DATETIME(delivery_time, '+5 hours', '20 minutes', '2 day') as package_time
FROM baked_goods;

SELECT id, MAX(cook_time, cool_down_time)
FROM baked_goods;

SELECT first_name || ' ' || last_name as full_name
FROM bakeries;

REPLACE(string,from_string,to_string)

SELECT REPLACE(ingredients,'enriched_',' ') as item_ingredients
FROM baked_goods;


DATETIME; Returns the date and time of the column specified. This can be modified to return only the date or only the time.
DATETIME(time1, +X hours, Y minutes, Z days): Increments the specificed column by a given number of hours, minutes, or days.
Numeric Functions:

(number1 + number2);: Returns the sum of two numbers, or other mathematical operations, accordingly.
CAST(number1 AS REAL) / number2;: Returns the result as a real number by casting one of numeric inputs as a real number
ROUND(number, precision);: Returns the numeric value rounded off to the next value specified.
String Functions:

'string1' || ' ' || 'string2';: Concatenates string1 and string 2, with a space between.
REPLACE(string,from_string,to_string): Returns the string with all occurrences of the string from_string replaced by the string to_string.